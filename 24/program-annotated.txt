
W = [ A,  B,, C,, D,  E,  F,  G,  H,  I,  J,  K,  L,  M,  N  ]
X = [ 13, 15, 15, 11, -7, 10, 10, -5, 15, -3, 0,  -5, -9, 0  ]
Y = [ 6,  7,  10, 2,  15, 8,  1,  10, 5,  3,  5,  11, 12, 10 ]
Z = [ 1,  1,  1,  1,  26, 1,  1,  26, 1,  26, 26, 26, 26, 26 ]

The program is broken up into 14 inputs, which are separated at the 'inp' instruction.

w is the input register
x and y are scratch registers
z is the stack register, using a base of 26

The program essentially consits of a equal amount of push and pop instructions.
Values are pushed onto the stack when Z[ i ] == 1. This happens because of the limitations imposed on the input, 
namely W[ i ] has to be greater than or equal to 1 and less than or equal to 9. It makes it impossible for 
x = ( z % 26 ) + X[ i ] to equal W[ i ] as X[ i ] is always greater than 9 when Z[ i ] == 1.

When Z[ i ] == 26, the section that follows is then the same as a pop instruction of the last values added to the stack, and can be solved
by solving the following equations.

For our example above the program flow is follows:
z.push( A + 6 )
z.push( B + 7 )
z.push( C + 10 )
z.push( D + 2 )
E == z.pop( ) - 7
z.push( F + 8 )
z.push( G + 1 )
H == z.pop( ) - 5
z.push( I + 5 )
J == z.pop( ) - 3
K == z.pop( ) - 0 
L == z.pop( ) - 5
M == z.pop( ) - 9
N == z.pop( ) - 0

Which can be simplified to:

E = D + 2 - 7  = D - 5
H = G + 1 - 5  = G - 4
J = I + 5 - 3  = I + 2
K = F + 8 - 0  = F + 8
L = C + 10 - 5 = C + 5
M = B + 7 - 9  = B - 2
N = A + 6 - 0  = A + 6

And further to:
E = D - 5
H = G - 4
J = I + 2
K = F + 8
L = C + 5
M = B - 2
N = A + 6

Since we are trying to maximise the values, any equation containing a + should equal 9, and vice versa

N = A + 6 -> 9 = A + 6, therefore A = 3, and N = 9
M = B - 2 -> M = 9 - 2, therefore M = 7, and B = 9


inp w
mul x 0
add x z
mod x 26
div z 1
add x 13
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 6
mul y x
add z y

inp w
mul x 0
add x z
mod x 26
div z 1
add x 15
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 7
mul y x
add z y

inp w
mul x 0
add x z
mod x 26
div z 1
add x 15
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 10
mul y x
add z y

inp w
mul x 0
add x z
mod x 26
div z 1
add x 11
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 2
mul y x
add z y

inp w
mul x 0
add x z
mod x 26
div z 26
add x -7
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 15
mul y x
add z y

inp w
mul x 0
add x z
mod x 26
div z 1
add x 10
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 8
mul y x
add z y

inp w
mul x 0
add x z
mod x 26
div z 1
add x 10
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 1
mul y x
add z y

inp w
mul x 0
add x z
mod x 26
div z 26
add x -5
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 10
mul y x
add z y

inp w
mul x 0
add x z
mod x 26
div z 1
add x 15
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 5
mul y x
add z y

inp w
mul x 0
add x z
mod x 26
div z 26
add x -3
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 3
mul y x
add z y

inp w
mul x 0
add x z
mod x 26
div z 26
add x 0
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 5
mul y x
add z y

inp w
mul x 0
add x z
mod x 26
div z 26
add x -5
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 11
mul y x
add z y

inp w
mul x 0
add x z
mod x 26
div z 26
add x -9
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 12
mul y x
add z y

inp w
mul x 0
add x z
mod x 26
div z 26
add x 0
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 10
mul y x
add z y
